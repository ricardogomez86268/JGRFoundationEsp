@inject SweetAlertService sweetAlertService

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"></NavigationLock>

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <span>
                <i class="oi oi-star" /> Crear Nuevo panel
                <a class="btn btn-sm btn-success float-end" href="/panels"><i class="oi oi-arrow-thick-left" /> Regresar</a>
                <button class="btn btn-sm btn-primary float-end mx-2" type="submit"><i class="oi oi-check" /> Guardar Cambios</button>
            </span>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-6">
                    <div class="mb-3">
                        <label>Panel:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@Panel.PanelReference" />
                            <ValidationMessage For="@(() => Panel.PanelReference)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Potencia:</label>
                        <div>
                            <InputNumber class="form-control" @bind-Value="@Panel.Power" />
                            <ValidationMessage For="@(() => Panel.Power)" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private EditContext editContext = null!;

    protected override void OnInitialized()
    {
        editContext = new(Panel);
    }

    public bool FormPostedSuccessfully { get; set; } = false;

    [EditorRequired]
    [Parameter]
    public Panel Panel { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmación",
            Text = "¿Deseas abandonar la página y perder los cambios?",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true
        });

        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
}
