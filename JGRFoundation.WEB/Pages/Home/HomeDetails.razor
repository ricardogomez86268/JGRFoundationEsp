@page "/homeDetails/{HomeId:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin, User")]

@if (home is null)
{
    <div class="spinner" />
}
else
{
    <GenericList MyList="home.HomeDetails!.ToList()">
        <RecordsComplete>
            <div class="card">
                <div class="card-header">
                    <span>
                        <i class="oi oi-random"></i> @home.User!.FullName
                        <a class="btn btn-sm btn-success float-end" href="/homes"><i class="oi oi-arrow-thick-left" /> Regresar</a>
                    </span>
                </div>
                <div class="row mx-2 my-2">
                    <div class="col-2">
                        <p>Cliente</p>
                        <p>Documento</p>
                        <p>Teléfono</p>
                        <p>Email</p>
                        <p>Dirección</p>
                    </div>
                    <div class="col-4">
                        <p><strong>@home.User.FullName</strong></p>
                        <p><strong>@home.User.Document</strong></p>
                        <p><strong>@home.User.PhoneNumber</strong></p>
                        <p><strong>@home.User.UserName</strong></p>
                        <p><strong>@home.User.Address</strong></p>
                    </div>
                    <div class="col-2">
                        <p>Coordenada</p>
                        <p>Líneas</p>
                        <p>Cantidad electrodomestico</p>
                        <p>Total consumo</p>
                    </div>
                    <div class="col-4">
                        <p><strong>@(string.IsNullOrEmpty(home.Coordinate) ? "0 ,0" : home.Coordinate)</strong></p>
                        <p><strong>@home.Lines</strong></p>
                        <p><strong>@($"{home.Quantity}")</strong></p>
                        <p><strong>@($"{home.TotalConsumption:N2}")</strong></p>
                    </div>
                </div>
            </div>
        </RecordsComplete>
    </GenericList>
}

@code {
    private Home? home;

    [Parameter]
    public int HomeId { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHppt = await repository.Get<Home>($"api/homes/{HomeId}");
        if (responseHppt.Error)
        {
            if (responseHppt.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/homes");
                return;
            }
            var messageError = await responseHppt.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
            return;
        }
        home = responseHppt.Response;
    }
}
